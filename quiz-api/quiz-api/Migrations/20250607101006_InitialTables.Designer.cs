// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace quiz_api.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20250607101006_InitialTables")]
    partial class InitialTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Answer", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer_text");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.HasKey("Uuid");

                    b.HasIndex("QuestionId");

                    b.ToTable("answer", (string)null);
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.PrimitiveCollection<List<string>>("CorrectAnswers")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("correct_answers");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.Property<Guid?>("QuestionTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_type_id");

                    b.HasKey("Uuid");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("question", (string)null);
                });

            modelBuilder.Entity("QuestionType", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.HasKey("Uuid");

                    b.ToTable("question_type", (string)null);
                });

            modelBuilder.Entity("QuizSession", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer")
                        .HasColumnName("attempts");

                    b.Property<int>("AttemptsUsed")
                        .HasColumnType("integer")
                        .HasColumnName("attempts_used");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateEnded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_ended");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_started");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<string>("QuestionAnswer")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("question_answer");

                    b.PrimitiveCollection<List<Guid>>("QuestionSequence")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("question_sequence");

                    b.Property<Guid?>("QuestionTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_type_id");

                    b.Property<int?>("Result")
                        .HasColumnType("integer")
                        .HasColumnName("result");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Uuid");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("quiz_session", (string)null);
                });

            modelBuilder.Entity("QuizTableResult", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<Guid?>("BestQuizSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("best_quiz_session_id");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("integer")
                        .HasColumnName("correct_answers");

                    b.Property<int>("QuizAmountTaken")
                        .HasColumnType("integer")
                        .HasColumnName("quiz_amount_taken");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Uuid");

                    b.HasIndex("BestQuizSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("quiz_table_results", (string)null);
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_salt");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("text")
                        .HasColumnName("reset_password_token");

                    b.Property<bool>("UserConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("user_confirmed");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("VerifyEmailToken")
                        .HasColumnType("text")
                        .HasColumnName("verify_email_token");

                    b.HasKey("Uuid");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Answer", b =>
                {
                    b.HasOne("Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.HasOne("QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("QuizSession", b =>
                {
                    b.HasOne("QuestionType", "QuestionType")
                        .WithMany("QuizSessions")
                        .HasForeignKey("QuestionTypeId");

                    b.HasOne("User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId");

                    b.Navigation("QuestionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizTableResult", b =>
                {
                    b.HasOne("QuizSession", "BestQuizSession")
                        .WithMany()
                        .HasForeignKey("BestQuizSessionId");

                    b.HasOne("User", "User")
                        .WithMany("QuizResults")
                        .HasForeignKey("UserId");

                    b.Navigation("BestQuizSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("QuestionType", b =>
                {
                    b.Navigation("QuizSessions");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("QuizResults");

                    b.Navigation("QuizSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
